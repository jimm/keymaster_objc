#+title: KeyMaster Files
#+options: h:7
#+html: <!--#include virtual="header.html"-->
#+options: num:nil

* KeyMaster Files

#+begin_quote
Source code in files. How quaint.\\
\\
-- Attributed to Kent Beck
#+end_quote

KeyMaster files describe your MIDI setup and define named messages,
triggers, songs with their patches, and chains of songs.

For a sample KeyMaster file, see [[https://github.com/jimm/patchmaster/blob/master/examples/example.km][examples/example.km]].

For a more detailed discussion of the things that can be in a KeyMaster
file (how they work and what they're for), see [[file:components.org][Components]] and [[file:patches.org][Running
Patches]].

* Loading and Saving KeyMaster Files

When you start KeyMaster you can specify a file to load on the command
line.

* Editing KeyMaster Files

#+begin_quote
Most editors are failed writers - but so are most writers.\\
\\
-- T. S. Eliot
#+end_quote

You can create and edit KeyMaster files using any text editor you like.

[[https://github.com/jimm/elisp/blob/master/progmodes/keymaster-mode.el][keymaster-mode.el]] is a simple Emacs mode for KeyMaster files.

* Anatomy of a KeyMaster File

** Comments

Comments and blank lines are ignored. A comment starts with '//' and may
appear anywhere on a line.

Indentation is ignored. It may be easier to read if you indent patches with
songs and connections within patches, for example.

** MIDI Byte Values

MIDI bytes can be written as decimal numbers, hex numbers ("0xff"), note
names ("C#3"), or the names specified in consts.m such as NOTE_ON, NOTE_OFF,
or CC_BANK_SELECT. Case is ignored for all byte values.

Note names start with a letter, optionally followed by '#' or 's' for sharp
or 'b' or 'f' for flat, then ending in an octave number. C4 is note
number 48.

To add a channel number to a status byte, add a colon (':') and the channel
number after the name. For example, "NOTE_OFF:4". Channels are one-based.

** MIDI Instruments

  input/output short_name Long Name

Describes MIDI inputs and outputs.

Short names must be unique within instrument type (input or output). For
example, you can have an input instrument with the short name "ws" and an
output instrument with the same short name "ws", but you can't have two
inputs or two outputs with the same short name.

Example:

#+begin_src keymaster
  input  con Lystereen Breath Controller
  input  kbd FancyPants MegaKeybaord
  output kbd FancyPants MegaKeybaord
  output rack UnitMaker Rack Unit 42b
#+end_src

** Triggers

#+begin_src keymaster
  trigger input_inst_short_name key bytes...
#+end_src

Input MIDI messages can cause KeyMaster to react as if you'd pressed a key.
When =bytes= are sent from the given input instrument then =key= is pressed
executed.

Example:

#+begin_src keymaster
  trigger in1 n CONTROLLER:4 CC_GEN_PURPOSE_5 0xff
  trigger in1 p CONTROLLER:4 CC_GEN_PURPOSE_6 0xff
#+end_src

** Songs

#+begin_src keymaster
  song name
#+end_src

A song is a list of patches.

Example:

#+begin_src keymaster
  song My First Song
    // patches...
#+end_src

*** Song Notes

#+begin_src keymaster
  song My First Song
    notes
    These are notes for the song.
    They will be displayed in the upper right window.
    end notes
#+end_src

*** Patches

#+begin_src keymaster
  patch name
    // connections
#+end_src

A patch contains connections and optional start and stop byte arrays.

- start_bytes
- stop_bytes
- connection

Example:

#+begin_src keymaster
  song My First Song
    patch First Song, First Patch
      // start_bytes [TUNE_REQUEST]
      connection mb kz 2     // all chans from mb, out to ch 2 on kz
        // ...

      connection ws 6 sj 4  // only ch 6 from ws_kbd, out to ch 4 on sj
        // ...

      conn ws 6 d4 10
    end
  end
#+end_src

**** Connections

#+begin_src keymaster
  connection in_sym in_chan out_sym out_chan
    // ...
  connection in_sym out_sym out_chan
    // ...
#+end_src

Connects an input instrument to an output instrument. If =in_chan= is
skipped then any message coming from that instrument will be processed, else
only messages coming from the specified channel will be processed.

A connection can optionally contain bank/program changes, transposes, and a
zone.

- programChange
- zone
- transpose

All those values are optional; you don't have to specify them.

Example:

#+begin_src keymaster
  song My First Song
    patch First Song First Patch
      connection ws 6 sj 4 do  // only chan 6 from ws out to ch 4 on sj
        programChange 100             // no bank, prog chg 100
        zone C4 B6
        transpose -12
        filter { |connection bytes|
          // ...
        }
      end
    end
  end
#+end_src

***** Program Changes

#+begin_src keymaster
  programChange prog_number
  pc bank_number prog_number
#+end_src

"programChange", "progChg", and "pc" all send program changes. Sends
=prog_number= to the output instrument's channel. If =bank_number= is
specified, sends bank change then program change.

Only one program change per connection is allowed. If there is more than one
in a connection the last one is used.

Examples:

#+begin_src keymaster
  progChg 42        // program change only
  pc 2 100          // bank change then program change
#+end_src

***** Zones

#+begin_src keymaster
  zone low high
#+end_src

By default a connection accepts and processes notes (and poly pressure
messages) for all MIDI note numbers 0-127. You can use the zone command to
limit which notes are passed through. Notes outside the defined range are
ignored.

The =zone= command can take either two notes or a range. Notes can be
numbers, or you can use the note names such as =C3=, =Ab3=, or =Df7= ("s"
or "#" for sharp, "f" or "b" for "flat").

Only one zone per connection is allowed. If there is more than one in a
connection the last one is used.

Example:

#+begin_src keymaster
  zone C2 B4      // only allows notes from C2 to B4
#+end_src

***** Transpose

#+begin_src keymaster
  transpose num
#+end_src

Specifies a note transposition that will be applied to all incoming note on,
note off, and polyphonic pressure messages.

Note that transposition occurs after a connection's zone has filtered out
incoming data, not before.

** Chains

#+begin_src keymaster
  chain name
    song name
    another song name
#+end_src

Optional.

Example:

#+begin_src keymaster
  chain Tonight's Song List
    First Song
    Second Song
#+end_src

* Aliases

Many of the keywords in KeyMaster files have short versions.

| Full Name     | Aliases     |
|---------------+-------------|
| connection    | conn, c     |
| input         | in          |
| message       | msg         |
| messageKey    | msgKey      |
| output        | out         |
| programChange | pc, progChg |
| transpose     | xpose, x    |
| zone          | z           |
